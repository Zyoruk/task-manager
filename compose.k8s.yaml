apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
    spec:
      containers:
        - name: kong
          image: localhost:5000/kong:latest
          ports:
            - containerPort: 80
            - containerPort: 443
            - containerPort: 8001
          volumeMounts:
            - name: kong-config
              mountPath: /kong.conf
              subPath: kong.conf
      volumes:
        - name: kong-config
          configMap:
            name: kong-config
---
apiVersion: v1
kind: Service
metadata:
  name: kong
spec:
  type: LoadBalancer # Or NodePort for testing
  selector:
    app: kong
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
    - protocol: TCP
      port: 443
      targetPort: 443
      name: https
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-auth-service
  template:
    metadata:
      labels:
        app: tm-auth-service
    spec:
      containers:
        - name: tm-auth-service
          image: localhost:5000/tm-auth-service:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tm-auth-service-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-metrics-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-metrics-api
  template:
    metadata:
      labels:
        app: tm-metrics-api
    spec:
      containers:
        - name: tm-metrics-api
          image: localhost:5000/tm-metrics-api:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tm-metrics-api-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-notifications-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-notifications-api
  template:
    metadata:
      labels:
        app: tm-notifications-api
    spec:
      containers:
        - name: tm-notifications-api
          image: localhost:5000/tm-notifications-api:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tm-notifications-api-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-tasks-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-tasks-api
  template:
    metadata:
      labels:
        app: tm-tasks-api
    spec:
      containers:
        - name: tm-tasks-api
          image: localhost:5000/tm-tasks-api:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tm-tasks-api-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-settings-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-settings-api
  template:
    metadata:
      labels:
        app: tm-settings-api
    spec:
      containers:
        - name: tm-settings-api
          image: localhost:5000/tm-settings-api:latest
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: tm-settings-api-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tm-core-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tm-core-app
  template:
    metadata:
      labels:
        app: tm-core-app
    spec:
      containers:
        - name: tm-core-app
          image: localhost:5000/tm-core-app:latest
          ports:
            - containerPort: 4200
---
apiVersion: v1
kind: Service
metadata:
  name: tm-auth-service
spec:
  selector:
    app: tm-auth-service
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: tm-metrics-api
spec:
  selector:
    app: tm-metrics-api
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: tm-notifications-api
spec:
  selector:
    app: tm-notifications-api
  ports:
    - protocol: TCP
      port: 3002
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: tm-tasks-api
spec:
  selector:
    app: tm-tasks-api
  ports:
    - protocol: TCP
      port: 3003
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: tm-settings-api
spec:
  selector:
    app: tm-settings-api
  ports:
    - protocol: TCP
      port: 3005
      targetPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: tm-core-app
spec:
  selector:
    app: tm-core-app
  ports:
    - protocol: TCP
      port: 4200
      targetPort: 4200
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-auth-service-env
data:
  TM_WHISPER: A_RANDOM_SECRET
  API_BASE_PATH: /auth
  PORT: 3000
  MONGODB_USER: newuser
  MONGODB_PASSWORD: newpassword
  MONGODB_HOST: mongodb
  MONGODB_PORT: 27017
  MONGODB_TASKS_DB: taskmanagerdb
  CLIENT_SECRET: A_RANDOM_CLIENT_SECRETS
  VALID_CLIENT_IDS: TM_TASKS_API
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-metrics-api-env
data:
  TM_WHISPER: 'A_RANDOM_SECRET'
  API_BASE_PATH: /metrics
  PORT: '3000'
  MONGODB_USER: newuser
  MONGODB_PASSWORD: newpassword
  MONGODB_HOST: mongodb
  MONGODB_PORT: '27017'
  MONGODB_TASKS_DB: taskmanagerdb
  AUTH_SERVICE_HOST: 'http://kong:8000/auth'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-notifications-api-env
data:
  TM_WHISPER: 'A_RANDOM_SECRET'
  API_BASE_PATH: /notifications
  PORT: '3000'
  MONGODB_USER: newuser
  MONGODB_PASSWORD: newpassword
  MONGODB_HOST: mongodb
  MONGODB_PORT: '27017'
  MONGODB_TASKS_DB: taskmanagerdb
  AUTH_SERVICE_HOST: 'http://kong:8000/auth'
  MQURL: 'amqp://rabbitmq:5672'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-tasks-api-env
data:
  MQURL: 'amqp://rabbitmq:5672'
  PORT: '3000'
  TM_WHISPER: 'A_RANDOM_SECRET'
  AUTH_SERVICE_HOST: 'http://kong:8000/auth'
  SETTINGS_SERVICE: 'http://kong:8000/settings'
  API_BASE_PATH: /tasks
  MONGODB_USER: newuser
  MONGODB_PASSWORD: newpassword
  MONGODB_HOST: mongodb
  MONGODB_PORT: '27017'
  MONGODB_TASKS_DB: taskmanagerdb
  CLIENT_SECRET: 'A_RANDOM_CLIENT_SECRETS'
  CLIENT_ID: 'TM_TASKS_API'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tm-settings-api-env
data:
  PORT: '3000'
  TM_WHISPER: 'A_RANDOM_SECRET'
  AUTH_SERVICE_HOST: 'http://kong:8000/auth'
  API_BASE_PATH: /settings
  MONGODB_USER: newuser
  MONGODB_PASSWORD: newpassword
  MONGODB_HOST: mongodb
  MONGODB_PORT: '27017'
  MONGODB_TASKS_DB: taskmanagerdb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-config
data:
  kong.conf: |
    _format_version: "3.0"

    # --- Upstream Services ---
    services:
      - name: tm-tasks-api
        url: http://tm-tasks-api:3000
        routes:
          - name: tasks-route
            paths:
              - /tasks
            plugins:
              # - name: tm-auth
              - name: rate-limiting
                config:
                  second: 5  # Limit to 5 requests per second per consumer
                  hour: 1000 # Limit to 1000 requests per hour per consumer
      - name: tm-settings-api
        url: http://tm-settings-api:3000
        routes:
          - name: settings-route
            paths:
              - /settings
            plugins:
              # - name: tm-auth
              - name: rate-limiting
                config:
                  second: 5  # Limit to 5 requests per second per consumer
                  hour: 1000 # Limit to 1000 requests per hour per consumer
      - name: tm-metrics-api
        url: http://tm-metrics-api:3000
        routes:
          - name: metrics-route
            paths:
              - /metrics
            plugins:
              # - name: tm-auth
              - name: rate-limiting
                config:
                  minute: 10 # Limit to 10 requests per minute per consumer
      - name: tm-auth-service
        url: http://tm-auth-service:3000
        routes:
          - name: auth-route
            paths:
              - /auth # Adjust the path based on your auth service API
            plugins:
              - name: rate-limiting
                config:
                  second: 10 # Higher limit for auth service, as it's critical
      - name: tm-notifications-api
        url: http://tm-notifications-api:3000 # Assuming you expose an HTTP interface for initial connection
        routes:
          - name: notifications-route
            paths:
              - /notifications
            # plugins:
            #   - name: tm-auth
      - name: tm-notifications-ws
        host: tm-notifications-api
        port: 3000
        protocol: tcp

    # --- Global Plugins for Security ---
    plugins:
      - name: cors # Enable CORS for browser clients
        config:
          origins: ['localhost'] # Adjust to your specific origins
          methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']
          headers: ['Authorization', 'Content-Type']
          credentials: true
          exposed_headers: ['X-Custom-Header']
      - name: request-size-limiting # Prevent overly large requests
        config:
          allowed_payload_size: 1048576 # 1MB limit
      # - name: request-termination # Protect against slow clients
      #   config:
      #     status_code: 403
      #     message: So long and thanks for all the fish!
      # - name: bundled,tm-auth
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:latest # Or a specific version
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: example
            - name: MONGO_INITDB_DATABASE
              value: taskmanagerdb
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
      name: mongodb

---
# RabbitMQ Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:3-management # Or a specific version with management plugin
          ports:
            - containerPort: 5672
            - containerPort: 15672 # For management UI
          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq/mnesia
      volumes:
        - name: rabbitmq-data
          persistentVolumeClaim:
            claimName: rabbitmq-data

---
# RabbitMQ Service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
      name: amqp
    - protocol: TCP
      port: 15672
      targetPort: 15672
      name: management

---
# MongoExpress Deployment (Optional)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image: mongo-express:latest # Or a specific version
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_SERVER
              value: mongodb
            - name: ME_CONFIG_BASICAUTH_USERNAME
              value: root
            - name: ME_CONFIG_BASICAUTH_PASSWORD
              value: example
            - name: ME_CONFIG_MONGODB_PORT
              value: '27017'
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              value: root
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              value: example

---
# MongoExpress Service (Optional)
apiVersion: v1
kind: Service
metadata:
  name: mongo-express
spec:
  selector:
    app: mongo-express
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      name: http
